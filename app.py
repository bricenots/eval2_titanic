# app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Configuraci√≥n general
st.set_page_config(
    page_title="Visualizaci√≥n Titanic - Evaluaci√≥n 2",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Sidebar con navegaci√≥n y contexto
with st.sidebar:
    st.title("üö¢ Titanic Explorer")
    st.markdown("### Evaluaci√≥n 2 - Mag√≠ster en Ciencia de Datos")
    st.markdown("**Autor:** Tom√°s Brice√±o")
    st.markdown("**Instituci√≥n:** [Nombre de tu universidad]")
    st.markdown("---")
    st.markdown("üìÇ Este visualizador permite explorar:")
    st.markdown("- Supervivencia por clase")
    st.markdown("- Distribuci√≥n de edad")
    st.markdown("- An√°lisis PCA en 3D")
    st.markdown("---")
    st.info("Sube el archivo original como `MDAS-HVD_EVAL_2_Datos.csv`")

# Carga de datos
@st.cache_data
def cargar_datos():
    return pd.read_csv("MDAS-HVD_EVAL_2_Datos.csv")

df = cargar_datos()

# Vista previa
st.title("üìä Explorador Interactivo del Titanic")
st.write("Visualizaciones anal√≠ticas basadas en el dataset real de pasajeros del Titanic.")
st.markdown("### üóÇÔ∏è Vista previa de los datos")
st.dataframe(df.head())
st.write(f"**Columnas detectadas:** {', '.join(df.columns)}")

# Tabs principales
tab1, tab2, tab3 = st.tabs(["üßç‚Äç‚ôÇÔ∏è Supervivencia por Clase", "üéÇ Edad y Supervivencia", "üß¨ PCA 3D"])

# ------------------- TAB 1 -------------------
with tab1:
    st.header("üßç‚Äç‚ôÇÔ∏è Supervivencia por Clase")
    prop_clase = df.groupby(['Pclass', 'Survived']).size().reset_index(name='count')

    st.subheader("Gr√°fico de barras (Seaborn)")
    fig1, ax1 = plt.subplots()
    sns.barplot(data=prop_clase, x='Pclass', y='count', hue='Survived', palette='Set2', ax=ax1)
    ax1.set_title("Distribuci√≥n de Supervivencia por Clase")
    st.pyplot(fig1)

    st.subheader("Gr√°fico interactivo (Plotly)")
    fig2 = px.bar(prop_clase, x='Pclass', y='count', color='Survived',
                  labels={'Pclass': 'Clase', 'count': 'Cantidad', 'Survived': 'Sobrevivi√≥'},
                  title="Supervivencia por Clase (Interactivo)")
    st.plotly_chart(fig2)

# ------------------- TAB 2 -------------------
with tab2:
    st.header("üéÇ Distribuci√≥n de Edad seg√∫n Supervivencia")

    df_age = df[["Age", "Survived"]].dropna()

    st.subheader("Distribuci√≥n KDE (Seaborn)")
    fig3, ax2 = plt.subplots()
    sns.kdeplot(data=df_age, x="Age", hue="Survived", fill=True, common_norm=False, palette='Set1', alpha=0.5, ax=ax2)
    ax2.set_title("Densidad de Edad por Supervivencia")
    st.pyplot(fig3)

    st.subheader("Histograma Interactivo (Plotly)")
    fig4 = px.histogram(df_age, x="Age", color="Survived", marginal="density",
                        labels={'Age': 'Edad', 'Survived': 'Sobrevivi√≥'},
                        title="Distribuci√≥n de Edad por Supervivencia (Interactivo)")
    st.plotly_chart(fig4)

# ------------------- TAB 3 -------------------
with tab3:
    st.header("üß¨ Visualizaci√≥n PCA 3D")

    # Solo columnas num√©ricas y sin nulos
    numeric = df.select_dtypes(include='number').drop(columns=['Survived'], errors='ignore')
    numeric = numeric.dropna()

    # Escalado + PCA
    X_scaled = StandardScaler().fit_transform(numeric)
    pca = PCA(n_components=3)
    components = pca.fit_transform(X_scaled)
    pca_df = pd.DataFrame(components, columns=["PC1", "PC2", "PC3"])
    pca_df["Survived"] = df.loc[numeric.index, "Survived"]

    # Filtro de grupo
    filtro = st.radio("Filtrar por sobrevivencia", ["Todos", "Solo sobrevivientes", "Solo no sobrevivientes"])
    if filtro == "Solo sobrevivientes":
        pca_df = pca_df[pca_df["Survived"] == 1]
    elif filtro == "Solo no sobrevivientes":
        pca_df = pca_df[pca_df["Survived"] == 0]

    # Gr√°fico
    fig5 = px.scatter_3d(pca_df, x="PC1", y="PC2", z="PC3", color=pca_df["Survived"].astype(str),
                         title="PCA 3D sobre variables cuantitativas",
                         labels={"color": "Sobrevivi√≥"})
    st.plotly_chart(fig5)

# Footer
st.markdown("---")
st.markdown("üß† *App desarrollada por Tom√°s Brice√±o - Evaluaci√≥n 2 - Mag√≠ster Ciencia de Datos*")

