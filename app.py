import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Configuraci√≥n inicial
st.set_page_config(page_title="An√°lisis Visual del Titanic", layout="wide")

# üîî Advertencia para m√≥viles
st.markdown("""
<style>
@media screen and (max-width: 800px) {
    .mobile-warning {
        display: block;
        padding: 1em;
        background-color: #fff3cd;
        border-left: 6px solid #ffa500;
        font-size: 15px;
        color: #856404;
        margin-bottom: 1.5em;
        border-radius: 5px;
    }
}
</style>
<div class='mobile-warning'>
üì± <strong>Advertencia:</strong> Esta aplicaci√≥n ha sido optimizada para computadores de escritorio. En m√≥viles algunos gr√°ficos y funciones pueden no mostrarse correctamente. Para mejor experiencia, usa una pantalla grande.
</div>
""", unsafe_allow_html=True)

# Funci√≥n para cargar datos
@st.cache_data
def cargar_datos():
    return pd.read_csv("MDAS-HVD_EVAL_2_Datos.csv")

df = cargar_datos()
df["Sobreviviente"] = df["Survived"].map({0: "No", 1: "S√≠"})

# üìù Storytelling de inicio
st.title("El Titanic: M√°s que datos, vidas")
st.markdown("""
> En abril de 1912, el **RMS Titanic**, orgullo de la ingenier√≠a naval, parti√≥ en su viaje inaugural desde Southampton a Nueva York. M√°s de 2.200 personas iban a bordo. Solo 710 sobrevivieron.

Esta aplicaci√≥n busca **dar sentido a los datos** de esa tragedia, explorando c√≥mo la clase social, la edad y otras variables influyeron en las posibilidades de sobrevivir.

Los datos son reales. Cada punto representa una vida. Comencemos.
""")

st.dataframe(df.head())

tab1, tab2, tab3 = st.tabs(["Supervivencia por Clase", "Distribuci√≥n de Edad", "An√°lisis PCA 3D"])

# ---------- TAB 1 ----------
with tab1:
    st.header("¬øSobrevivir o no? La importancia de la clase")
    st.markdown("""
Durante el naufragio, la **clase del pasaje** influy√≥ dr√°sticamente en las posibilidades de escapar.

¬øFue el acceso a los botes? ¬øLa ubicaci√≥n en el barco? ¬øLa velocidad de respuesta?

Este gr√°fico muestra c√≥mo la clase social marc√≥ una diferencia.
""")

    resumen_clase = df.groupby(["Pclass", "Sobreviviente"]).size().reset_index(name="Cantidad")

    fig1, ax1 = plt.subplots()
    sns.barplot(data=resumen_clase, x="Pclass", y="Cantidad", hue="Sobreviviente",
                palette=["#d62728", "#2ca02c"], ax=ax1)
    ax1.set_title("Supervivencia seg√∫n Clase de Pasaje")
    ax1.set_xlabel("Clase")
    ax1.set_ylabel("Cantidad de Pasajeros")
    st.pyplot(fig1)

    fig2 = px.bar(resumen_clase, x="Pclass", y="Cantidad", color="Sobreviviente",
                  color_discrete_map={"No": "#d62728", "S√≠": "#2ca02c"},
                  labels={"Pclass": "Clase", "Cantidad": "Cantidad de Pasajeros"},
                  title="Supervivencia por Clase (Interactivo)")
    st.plotly_chart(fig2)

# ---------- TAB 2 ----------
with tab2:
    st.header("La edad no perdona... ¬øo s√≠?")
    st.markdown("""
Uno podr√≠a pensar que los ni√±os tendr√≠an prioridad. ¬øPero fue as√≠?

Estos gr√°ficos permiten explorar si hubo diferencias en la supervivencia seg√∫n la edad de los pasajeros.
""")

    df_edad = df[["Age", "Sobreviviente"]].dropna()

    fig3, ax2 = plt.subplots()
    sns.kdeplot(data=df_edad, x="Age", hue="Sobreviviente", fill=True,
                palette=["#d62728", "#2ca02c"], ax=ax2)
    ax2.set_title("Densidad de Edad por Supervivencia")
    ax2.set_xlabel("Edad")
    ax2.set_ylabel("Densidad")
    st.pyplot(fig3)

    try:
        df_edad["Sobreviviente"] = df_edad["Sobreviviente"].astype(str)
        fig4 = px.histogram(df_edad, x="Age", color="Sobreviviente",
                            color_discrete_map={"No": "#d62728", "S√≠": "#2ca02c"},
                            labels={"Age": "Edad", "Sobreviviente": "Supervivencia"},
                            title="Histograma de Edad por Supervivencia (Interactivo)")
        st.plotly_chart(fig4)
    except Exception as e:
        st.error("No se pudo generar el histograma interactivo.")
        st.exception(e)

# ---------- TAB 3 ----------
with tab3:
    st.header("¬øY si lo vemos en tres dimensiones?")
    st.markdown("""
El An√°lisis de Componentes Principales (PCA) permite reducir m√∫ltiples variables a solo tres dimensiones visuales.

Aqu√≠ podr√°s observar una representaci√≥n simplificada de los pasajeros, agrupados seg√∫n si sobrevivieron o no.
""")

    datos_numericos = df.select_dtypes(include="number").dropna()
    X = StandardScaler().fit_transform(datos_numericos)
    pca = PCA(n_components=3)
    componentes = pca.fit_transform(X)
    pca_df = pd.DataFrame(componentes, columns=["CP1", "CP2", "CP3"])
    pca_df["Sobreviviente"] = df.loc[datos_numericos.index, "Sobreviviente"]

    filtro = st.radio("Filtrar por:", ["Todos", "Solo sobrevivientes", "Solo no sobrevivientes"])
    if filtro == "Solo sobrevivientes":
        pca_df = pca_df[pca_df["Sobreviviente"] == "S√≠"]
    elif filtro == "Solo no sobrevivientes":
        pca_df = pca_df[pca_df["Sobreviviente"] == "No"]

    fig5 = px.scatter_3d(pca_df, x="CP1", y="CP2", z="CP3", color="Sobreviviente",
                         color_discrete_map={"No": "#d62728", "S√≠": "#2ca02c"},
                         title="Visualizaci√≥n 3D PCA por Supervivencia")
    st.plotly_chart(fig5)

# ---------- CIERRE ----------
st.markdown("---")
st.markdown("""
### üéØ Reflexi√≥n Final

Esta visualizaci√≥n no solo muestra datos, sino tambi√©n decisiones humanas.

Cada punto representa una historia. Esta aplicaci√≥n es un intento de entender, desde los datos, qu√© factores hicieron la diferencia aquella noche.

Los datos no hablan por s√≠ solos. Somos nosotros quienes debemos **darles sentido**.
""")

st.caption("Aplicaci√≥n desarrollada por Tom√°s Brice√±o ‚Äî Evaluaci√≥n 2, Mag√≠ster en Ciencia de Datos.")
